@page "/categories"
@inject IViewCategoriesUseCase ViewCategoriesUseCase
@inject IDeleteCategoryUseCase DeleteCategoryUseCase
@inject NavigationManager NavigationManager

<h3>Manage Categories</h3>
@if (categories != null)
{

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.Name</td>
                    <td>@category.Description</td>
                    <td>
                        <button type="button" class="btn btn-link" @onclick="@(() => EditCategory(category))">Edit</button>
                        <button type="button" class="btn btn-danger" @onclick="@(() => DeleteCategory(category.CategoryId))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" type="button" @onclick="OnClickAddCategory">Add Category</button>
}

@code {
    private List<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadCategories();
    }

    private void OnClickAddCategory()
    {
        NavigationManager.NavigateTo("/addcategory");
    }

    private void EditCategory(Category category)
    {
        NavigationManager.NavigateTo($"/editcategory/{category.CategoryId}");
    }

    private void DeleteCategory(int categoryId)
    {
        DeleteCategoryUseCase.Delete(categoryId);
        LoadCategories();
    }

    private void LoadCategories()
    {
        categories = ViewCategoriesUseCase.Execute().ToList();
    }
}
