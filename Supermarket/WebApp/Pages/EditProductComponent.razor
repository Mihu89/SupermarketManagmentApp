@page "/editproduct/{productId}"
@inject IEditProductUseCase EditProductUseCase;
@inject IGetProductByIdUseCase GetProductByIdUseCase;
@inject IViewCategoriesUseCase ViewCategoriesUseCase;
@inject NavigationManager NavigationManager;

<h3>Edit Product</h3>
<br />
@if (product != null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Name</label>
            <InputText class="form-control" id="name" @bind-Value="product.Name"></InputText>
        </div>
        
        <div class="form-group">
            <label for="category">Category</label>
            <select id="category" @bind="product.CategoryId" class="form-select">
                @*<option value="0">Select category</option>*@
                <option selected>Select category</option>
                @foreach (var category in categories)
                {
                    <option value="@category.CategoryId">@category.Name</option>
                }
            </select>
        </div>

         <div class="form-group">
            <label for="price">Price</label>
            <InputNumber class="form-control" id="price" @bind-Value="product.Price" @bind-Value:format="F2"></InputNumber>
        </div>
        
         <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber class="form-control" id="quantity" @bind-Value="product.Quantity"></InputNumber>
        </div>
        <button class="btn btn-primary" type="submit">Save</button>
        <button class="btn btn" @onclick="OnCancel">Cancel</button>
    </EditForm>
}
@code {

    [Parameter]
    public string ProductId {get; set;}

    private Product product;
    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        categories = ViewCategoriesUseCase.Execute();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if(int.TryParse(this.ProductId, out int iproductId))
        {
            var prod = GetProductByIdUseCase.GetProductById(iproductId);
            product = new Product
                {
                    ProductId = prod.ProductId,
                    Name = prod.Name,
                    CategoryId = prod.CategoryId,
                    Price = prod.Price,
                    Quantity = prod.Quantity,
                };
        }

    }

    private void OnValidSubmit()
    {
        EditProductUseCase.Execute(this.product);
        NavigationManager.NavigateTo("/products");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/products");
    }
}
