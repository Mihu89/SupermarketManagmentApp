@inject IViewProductsUseCase ViewProductsUseCase
@inject IGetCategoryByIdUseCase GetCategoryByIdUseCase
@page "/products"

<h3>Products List</h3>
@if(products != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Category</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var product in products){
                <tr>
                    <td>@GetCategoryByIdUseCase.Execute(@product.CategoryId)?.Name</td>
                    <td>@product.Name</td>
                    <td>@Math.Round(@product.Price, 2)</td>
                    <td>@product.Quantity</td>
                    <td>
                        <button class="btn">Edit</button>
                        <button class="btn">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h4>No products, add first!</h4>
}

@code {
    private IEnumerable<Product> products;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        products = ViewProductsUseCase.Execute();
    }
}
