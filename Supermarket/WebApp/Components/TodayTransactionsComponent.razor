@inject IGetTodayTransactionsUseCase GetTodayTransactionsUseCase;

<h3>Today Transactions</h3>
@if (transactions != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Cashier Name</th>
                <th>Product Name</th>
                <th>DateTime</th>
                <th>Quantity Before</th>
                <th>Quantity Sold</th>
                <th>Quantity After</th>
                <th>Sold amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactions)
            {
                <tr>
                    <td>@transaction.CashierName</td>
                    <td>@transaction.ProductName</td>
                    <td>@transaction.TimeStamp.ToString("MM/dd hh:mm")</td>
                    <td>@transaction.BeforeQuantity</td>
                    <td>@transaction.Quantity</td>
                    <td>@(transaction.BeforeQuantity - transaction.Quantity)</td>
                    <td>@(string.Format("{0:c}",transaction.Quantity * transaction.Price))</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private IEnumerable<Transaction> transactions;

    public void LoadTransactions(string cashierName)
    {
        transactions = GetTodayTransactionsUseCase.Execute(cashierName);
        StateHasChanged();
    }
}
